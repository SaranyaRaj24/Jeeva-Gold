generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
}

model MasterItem {
  id        Int      @id @default(autoincrement())
  itemName  String
  createdAt DateTime @default(now())
  items     Item[]   
}

model CoinStock {
  id          Int       @id @default(autoincrement())
  coinType    String    
  gram        Float   
  quantity    Int       
  touch       Float
  totalWeight Float     
  purity      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  stockLogs   StockLog[] 
}
model StockLog {
  id          Int       @id @default(autoincrement())
  coinType    String
  gram        Float
  quantity    Int        
  changeType  String    
  reason      String?    
  createdAt   DateTime   @default(now())

  coinStock   CoinStock  @relation(fields: [coinStockId], references: [id])
  coinStockId Int
}


model Goldsmith {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  jobCards  JobCard[]  
}

model JobCard {
  id          Int       @id @default(autoincrement())
  date        DateTime
  description String?
  goldsmithId Int
  goldsmith   Goldsmith @relation(fields: [goldsmithId], references: [id])
  items       Item[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
} 

model Item {
  id                  Int               @id @default(autoincrement())
  masterItemId        Int
  masterItem          MasterItem        @relation(fields: [masterItemId], references: [id])
  jobCardId           Int
  jobCard             JobCard           @relation(fields: [jobCardId], references: [id])
  originalGivenWeight Float
  givenWeight         Float
  touch               Float
  estimateWeight      Float
  finalWeight         Float?
  wastage             Float?
  purity              Float?
  additionalWeights   AdditionalWeight[]
}
model AdditionalWeight {
  id     Int    @id @default(autoincrement())
  name   String
  weight Float
  itemId Int
  operators String
  item   Item   @relation(fields: [itemId], references: [id])
}
